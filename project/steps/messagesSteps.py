# coding=utf-8

from robot.libraries.BuiltIn import BuiltIn
from framework.support.commonFunctions import get_random_int, sleep
from framework.support.log import log_info
from project.api_call.messagesApi import MessagesApi
from project.steps.usersSteps import detete_more_10_weeks_last_seen_users


def send_message(account_id, user_model, message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    return MessagesApi(account_id).send(user_model=user_model, text=message)


def send_birthday_message(account_id, user_model):
    if user_model.can_write_private_message == 1:
        birthday_message = '—Å –¥–Ω–Å–º —Ä–æ–∂–¥–µ–Ω–∏—è) –ó–¥–æ—Ä–æ–≤—å—è, –ª—é–±–≤–∏, —Ç–µ–ø–ª–∞ –∏ —á—Ç–æ–±—ã –≤—Å—ë —Å–±—ã–ª–æ—Å—å, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –Ω–∞–∂–µ–ª–∞—é—Çüòâ'
        discount_message = '–í —á–µ—Å—Ç—å –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –º—ã –¥–∞—Ä–∏–º –≤–∞–º —Å–∫–∏–¥–æ—á–∫—É 10% –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É Windows –∏–ª–∏ —á–∏—Å—Ç–∫—É ' \
                           '–Ω–æ—É—Ç–±—É–∫–∞, –Ω–∞ –≤—ã–±–æ—Äüòä.\n–î–µ–π—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞üòâ'
        end_dialog = '–ï—â–µ —Ä–∞–∑ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º!üòä'
        message = '{birth}\n\n{discount}\n{end}'.format(birth=birthday_message,
                                                        discount=discount_message,
                                                        end=end_dialog)
        return send_message(account_id=account_id,
                            user_model=user_model,
                            message=message)


def send_birthday_messages(account_id, users, max_count):
    users = detete_more_10_weeks_last_seen_users(users)
    count_users = len(users)
    log_info('–ù–∞–π–¥–µ–Ω–æ {len} —á–µ–ª.'.format(len=count_users))
    count = 1
    for birthday_user in users:
        result = send_birthday_message(account_id=account_id,
                                       user_model=birthday_user)
        if result is not None:
            random_seconds = get_random_int(100, 179)
            log_info('   {message}: {count}.'.format(message='–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
                                                     count=count))
            sleep(random_seconds)
            count += 1
            if count >= max_count:
                break
    log_info('::: [END] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {count}/{len}. :::'.format(count=count - 1,
                                                                         len=count_users))
    if (count-1) < 5:
        BuiltIn().fail(msg='Count < {}'.format(count-1))
